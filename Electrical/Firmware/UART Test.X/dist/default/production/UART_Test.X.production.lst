

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Nov 16 15:47:08 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16LF627A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   102                           PCLATH equ 0Ah ;# 
   103  000A                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   104                           INTCON equ 0Bh ;# 
   105  000B                     # 390 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   106                           PIR1 equ 0Ch ;# 
   107  000C                     # 447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   108                           TMR1 equ 0Eh ;# 
   109  000E                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   110                           TMR1L equ 0Eh ;# 
   111  000E                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   112                           TMR1H equ 0Fh ;# 
   113  000F                     # 468 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   114                           T1CON equ 010h ;# 
   115  0010                     # 527 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   116                           TMR2 equ 011h ;# 
   117  0011                     # 534 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   118                           T2CON equ 012h ;# 
   119  0012                     # 605 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   120                           CCPR1 equ 015h ;# 
   121  0015                     # 612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   122                           CCPR1L equ 015h ;# 
   123  0015                     # 619 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   124                           CCPR1H equ 016h ;# 
   125  0016                     # 626 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   126                           CCP1CON equ 017h ;# 
   127  0017                     # 684 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   128                           RCSTA equ 018h ;# 
   129  0018                     # 755 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   130                           TXREG equ 019h ;# 
   131  0019                     # 762 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   132                           RCREG equ 01Ah ;# 
   133  001A                     # 769 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   134                           CMCON equ 01Fh ;# 
   135  001F                     # 839 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   136                           OPTION_REG equ 081h ;# 
   137  0081                     # 909 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   138                           TRISA equ 085h ;# 
   139  0085                     # 971 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   140                           TRISB equ 086h ;# 
   141  0086                     # 1033 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   142                           PIE1 equ 08Ch ;# 
   143  008C                     # 1090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   144                           PCON equ 08Eh ;# 
   145  008E                     # 1139 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   146                           PR2 equ 092h ;# 
   147  0092                     # 1146 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   148                           TXSTA equ 098h ;# 
   149  0098                     # 1203 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   150                           SPBRG equ 099h ;# 
   151  0099                     # 1210 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   152                           EEDATA equ 09Ah ;# 
   153  009A                     # 1217 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   154                           EEADR equ 09Bh ;# 
   155  009B                     # 1224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   156                           EECON1 equ 09Ch ;# 
   157  009C                     # 1262 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   158                           EECON2 equ 09Dh ;# 
   159  009D                     # 1269 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   160                           VRCON equ 09Fh ;# 
   161  009F                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   162                           INDF equ 00h ;# 
   163  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   164                           TMR0 equ 01h ;# 
   165  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   166                           PCL equ 02h ;# 
   167  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   168                           STATUS equ 03h ;# 
   169  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   170                           FSR equ 04h ;# 
   171  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   172                           PORTA equ 05h ;# 
   173  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   174                           PORTB equ 06h ;# 
   175  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   176                           PCLATH equ 0Ah ;# 
   177  000A                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   178                           INTCON equ 0Bh ;# 
   179  000B                     # 390 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   180                           PIR1 equ 0Ch ;# 
   181  000C                     # 447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   182                           TMR1 equ 0Eh ;# 
   183  000E                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   184                           TMR1L equ 0Eh ;# 
   185  000E                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   186                           TMR1H equ 0Fh ;# 
   187  000F                     # 468 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   188                           T1CON equ 010h ;# 
   189  0010                     # 527 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   190                           TMR2 equ 011h ;# 
   191  0011                     # 534 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   192                           T2CON equ 012h ;# 
   193  0012                     # 605 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   194                           CCPR1 equ 015h ;# 
   195  0015                     # 612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   196                           CCPR1L equ 015h ;# 
   197  0015                     # 619 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   198                           CCPR1H equ 016h ;# 
   199  0016                     # 626 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   200                           CCP1CON equ 017h ;# 
   201  0017                     # 684 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   202                           RCSTA equ 018h ;# 
   203  0018                     # 755 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   204                           TXREG equ 019h ;# 
   205  0019                     # 762 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   206                           RCREG equ 01Ah ;# 
   207  001A                     # 769 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   208                           CMCON equ 01Fh ;# 
   209  001F                     # 839 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   210                           OPTION_REG equ 081h ;# 
   211  0081                     # 909 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   212                           TRISA equ 085h ;# 
   213  0085                     # 971 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   214                           TRISB equ 086h ;# 
   215  0086                     # 1033 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   216                           PIE1 equ 08Ch ;# 
   217  008C                     # 1090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   218                           PCON equ 08Eh ;# 
   219  008E                     # 1139 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   220                           PR2 equ 092h ;# 
   221  0092                     # 1146 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   222                           TXSTA equ 098h ;# 
   223  0098                     # 1203 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   224                           SPBRG equ 099h ;# 
   225  0099                     # 1210 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   226                           EEDATA equ 09Ah ;# 
   227  009A                     # 1217 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   228                           EEADR equ 09Bh ;# 
   229  009B                     # 1224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   230                           EECON1 equ 09Ch ;# 
   231  009C                     # 1262 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   232                           EECON2 equ 09Dh ;# 
   233  009D                     # 1269 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16lf627a.h"
   234                           VRCON equ 09Fh ;# 
   235  009F                     	FNCALL	_main,_UART_Init
   236                           	FNCALL	_main,_UART_Write
   237                           	FNCALL	_UART_Init,___aldiv
   238                           	FNROOT	_main
   239                           	global	_PORTB
   240                           _PORTB	set	0x6
   241  0006                     	global	_TXREG
   242                           _TXREG	set	0x19
   243  0019                     	global	_RCSTA
   244                           _RCSTA	set	0x18
   245  0018                     	global	_TRISB
   246                           _TRISB	set	0x86
   247  0086                     	global	_SPBRG
   248                           _SPBRG	set	0x99
   249  0099                     	global	_TXSTA
   250                           _TXSTA	set	0x98
   251  0098                     ; #config settings
   252                           global __CFG_FOSC$INTOSCIO
   253                           __CFG_FOSC$INTOSCIO equ 0x0
   254  0000                     global __CFG_WDTE$OFF
   255                           __CFG_WDTE$OFF equ 0x0
   256  0000                     global __CFG_PWRTE$OFF
   257                           __CFG_PWRTE$OFF equ 0x0
   258  0000                     global __CFG_MCLRE$ON
   259                           __CFG_MCLRE$ON equ 0x0
   260  0000                     global __CFG_BOREN$OFF
   261                           __CFG_BOREN$OFF equ 0x0
   262  0000                     global __CFG_LVP$OFF
   263                           __CFG_LVP$OFF equ 0x0
   264  0000                     global __CFG_CPD$OFF
   265                           __CFG_CPD$OFF equ 0x0
   266  0000                     global __CFG_CP$OFF
   267                           __CFG_CP$OFF equ 0x0
   268  0000                     	file	"C:\Users\flyhi\AppData\Local\Temp\s55g."
   269                           	line	#
   270                           psect cinit,class=CODE,delta=2
   271                           global start_initialization
   272                           start_initialization:
   273  03FE                     
   274                           global __initialization
   275                           __initialization:
   276  03FE                     psect cinit,class=CODE,delta=2,merge=1
   277                           global end_of_initialization,__end_of__initialization
   278                           
   279                           ;End of C runtime variable initialization code
   280                           
   281                           end_of_initialization:
   282  03FE                     __end_of__initialization:
   283  03FE                     clrf status
   284  03FE  0183               ljmp _main	;jump to C main() function
   285  03FF  2A37               psect	cstackCOMMON,class=COMMON,space=1,noexec
   286                           global __pcstackCOMMON
   287                           __pcstackCOMMON:
   288  0070                     ?_UART_Write:	; 1 bytes @ 0x0
   289  0070                     ??_UART_Write:	; 1 bytes @ 0x0
   290  0070                     	global	?___aldiv
   291                           ?___aldiv:	; 4 bytes @ 0x0
   292  0070                     	global	___aldiv@divisor
   293                           ___aldiv@divisor:	; 4 bytes @ 0x0
   294  0070                     	ds	1
   295  0070                     	global	UART_Write@data
   296                           UART_Write@data:	; 1 bytes @ 0x1
   297  0071                     	ds	3
   298  0071                     	global	___aldiv@dividend
   299                           ___aldiv@dividend:	; 4 bytes @ 0x4
   300  0074                     	ds	4
   301  0074                     ??___aldiv:	; 1 bytes @ 0x8
   302  0078                     	ds	1
   303  0078                     	global	UART_Init@x
   304                           UART_Init@x:	; 2 bytes @ 0x9
   305  0079                     	ds	2
   306  0079                     ??_main:	; 1 bytes @ 0xB
   307  007B                     	ds	3
   308  007B                     psect	cstackBANK0,class=BANK0,space=1,noexec
   309                           global __pcstackBANK0
   310                           __pcstackBANK0:
   311  0020                     	global	___aldiv@counter
   312                           ___aldiv@counter:	; 1 bytes @ 0x0
   313  0020                     	ds	1
   314  0020                     	global	___aldiv@sign
   315                           ___aldiv@sign:	; 1 bytes @ 0x1
   316  0021                     	ds	1
   317  0021                     	global	___aldiv@quotient
   318                           ___aldiv@quotient:	; 4 bytes @ 0x2
   319  0022                     	ds	4
   320  0022                     ?_UART_Init:	; 1 bytes @ 0x6
   321  0026                     	global	UART_Init@baudrate
   322                           UART_Init@baudrate:	; 4 bytes @ 0x6
   323  0026                     	ds	4
   324  0026                     ??_UART_Init:	; 1 bytes @ 0xA
   325  002A                     	ds	12
   326  002A                     ?_main:	; 2 bytes @ 0x16
   327  0036                     main@argc:	; 2 bytes @ 0x16
   328  0036                     	ds	2
   329  0036                     main@argv:	; 2 bytes @ 0x18
   330  0038                     	ds	2
   331  0038                     ;!
   332                           ;!Data Sizes:
   333                           ;!    Strings     0
   334                           ;!    Constant    0
   335                           ;!    Data        0
   336                           ;!    BSS         0
   337                           ;!    Persistent  0
   338                           ;!    Stack       0
   339                           ;!
   340                           ;!Auto Spaces:
   341                           ;!    Space          Size  Autos    Used
   342                           ;!    COMMON           14     14      14
   343                           ;!    BANK0            80     26      26
   344                           ;!    BANK1            80      0       0
   345                           ;!    BANK2            48      0       0
   346                           
   347                           ;!
   348                           ;!Pointer List with Targets:
   349                           ;!
   350                           ;!    None.
   351                           
   352                           
   353                           ;!
   354                           ;!Critical Paths under _main in COMMON
   355                           ;!
   356                           ;!    _main->_UART_Init
   357                           ;!    _UART_Init->___aldiv
   358                           ;!
   359                           ;!Critical Paths under _main in BANK0
   360                           ;!
   361                           ;!    _main->_UART_Init
   362                           ;!    _UART_Init->___aldiv
   363                           ;!
   364                           ;!Critical Paths under _main in BANK1
   365                           ;!
   366                           ;!    None.
   367                           ;!
   368                           ;!Critical Paths under _main in BANK2
   369                           ;!
   370                           ;!    None.
   371                           
   372 ;;
   373 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   374 ;;
   375                           
   376                           ;!
   377                           ;!Call Graph Tables:
   378                           ;!
   379                           ;! ---------------------------------------------------------------------------------
   380                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   381                           ;! ---------------------------------------------------------------------------------
   382                           ;! (0) _main                                                 7     3      4     851
   383                           ;!                                             11 COMMON     3     3      0
   384                           ;!                                             22 BANK0      4     0      4
   385                           ;!                          _UART_Init
   386                           ;!                         _UART_Write
   387                           ;! ---------------------------------------------------------------------------------
   388                           ;! (1) _UART_Write                                           2     2      0      15
   389                           ;!                                              0 COMMON     2     2      0
   390                           ;! ---------------------------------------------------------------------------------
   391                           ;! (1) _UART_Init                                           18    14      4     836
   392                           ;!                                              9 COMMON     2     2      0
   393                           ;!                                              6 BANK0     16    12      4
   394                           ;!                            ___aldiv
   395                           ;! ---------------------------------------------------------------------------------
   396                           ;! (2) ___aldiv                                             15     7      8     604
   397                           ;!                                              0 COMMON     9     1      8
   398                           ;!                                              0 BANK0      6     6      0
   399                           ;! ---------------------------------------------------------------------------------
   400                           ;! Estimated maximum stack depth 2
   401                           ;! ---------------------------------------------------------------------------------
   402                           ;!
   403                           ;! Call Graph Graphs:
   404                           ;!
   405                           ;! _main (ROOT)
   406                           ;!   _UART_Init
   407                           ;!     ___aldiv
   408                           ;!   _UART_Write
   409                           ;!
   410                           
   411                           ;! Address spaces:
   412                           
   413                           ;!Name               Size   Autos  Total    Cost      Usage
   414                           ;!BITCOMMON            E      0       0       0        0.0%
   415                           ;!EEDATA              80      0       0       0        0.0%
   416                           ;!NULL                 0      0       0       0        0.0%
   417                           ;!CODE                 0      0       0       0        0.0%
   418                           ;!COMMON               E      E       E       1      100.0%
   419                           ;!BITSFR0              0      0       0       1        0.0%
   420                           ;!SFR0                 0      0       0       1        0.0%
   421                           ;!BITSFR1              0      0       0       2        0.0%
   422                           ;!SFR1                 0      0       0       2        0.0%
   423                           ;!STACK                0      0       0       2        0.0%
   424                           ;!BANK0               50     1A      1A       3       32.5%
   425                           ;!BITSFR3              0      0       0       4        0.0%
   426                           ;!SFR3                 0      0       0       4        0.0%
   427                           ;!ABS                  0      0       0       4        0.0%
   428                           ;!BITBANK0            50      0       0       5        0.0%
   429                           ;!BITSFR2              0      0       0       5        0.0%
   430                           ;!SFR2                 0      0       0       5        0.0%
   431                           ;!BITBANK1            50      0       0       6        0.0%
   432                           ;!BANK1               50      0       0       7        0.0%
   433                           ;!BITBANK2            30      0       0       8        0.0%
   434                           ;!BANK2               30      0       0       9        0.0%
   435                           ;!DATA                 0      0       0      10        0.0%
   436                           
   437                           	global	_main
   438                           
   439 ;; *************** function _main *****************
   440 ;; Defined at:
   441 ;;		line 71 in file "main.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;  argc            2   22[BANK0 ] int 
   444 ;;  argv            2   24[BANK0 ] PTR PTR unsigned char 
   445 ;; Auto vars:     Size  Location     Type
   446 ;;		None
   447 ;; Return value:  Size  Location     Type
   448 ;;                  2   22[BANK0 ] int 
   449 ;; Registers used:
   450 ;;		wreg, status,2, status,0, pclath, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : B00/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   456 ;;      Params:         0       4       0       0
   457 ;;      Locals:         0       0       0       0
   458 ;;      Temps:          3       0       0       0
   459 ;;      Totals:         3       4       0       0
   460 ;;Total ram usage:        7 bytes
   461 ;; Hardware stack levels required when called:    2
   462 ;; This function calls:
   463 ;;		_UART_Init
   464 ;;		_UART_Write
   465 ;; This function is called by:
   466 ;;		Startup code after reset
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   470                           	file	"main.c"
   471                           	line	71
   472                           global __pmaintext
   473                           __pmaintext:	;psect for function _main
   474  0237                     psect	maintext
   475                           	file	"main.c"
   476                           	line	71
   477                           	global	__size_of_main
   478                           	__size_of_main	equ	__end_of_main-_main
   479  0033                     	
   480                           _main:	
   481  0237                     ;incstack = 0
   482                           	opt	stack 6
   483                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   484                           	line	72
   485                           	
   486                           l768:	
   487  0237                     ;main.c: 72:     TRISB &= ~(1ULL << 4);
   488                           	movlw	low(0EFh)
   489  0237  30EF               	movwf	(??_main+0)+0
   490  0238  00FB               	movf	(??_main+0)+0,w
   491  0239  087B               	bsf	status, 5	;RP0=1, select bank1
   492  023A  1683               	bcf	status, 6	;RP1=0, select bank1
   493  023B  1303               	andwf	(134)^080h,f	;volatile
   494  023C  0586               	line	73
   495                           	
   496                           l770:	
   497  023D                     ;main.c: 73:     UART_Init(9600);
   498                           	movlw	0
   499  023D  3000               	bcf	status, 5	;RP0=0, select bank0
   500  023E  1283               	bcf	status, 6	;RP1=0, select bank0
   501  023F  1303               	movwf	(UART_Init@baudrate+3)
   502  0240  00A9               	movlw	0
   503  0241  3000               	movwf	(UART_Init@baudrate+2)
   504  0242  00A8               	movlw	025h
   505  0243  3025               	movwf	(UART_Init@baudrate+1)
   506  0244  00A7               	movlw	080h
   507  0245  3080               	movwf	(UART_Init@baudrate)
   508  0246  00A6               
   509                           	fcall	_UART_Init
   510  0247  2310               	line	74
   511                           	
   512                           l772:	
   513  0248                     ;main.c: 74:     _delay((unsigned long)((100)*(4000000/4000.0)));
   514                           	opt asmopt_push
   515                           opt asmopt_off
   516                           movlw	130
   517  0248  3082               movwf	((??_main+0)+0+1),f
   518  0249  00FC               	movlw	221
   519  024A  30DD               movwf	((??_main+0)+0),f
   520  024B  00FB               	u407:
   521  024C                     decfsz	((??_main+0)+0),f
   522  024C  0BFB               	goto	u407
   523  024D  2A4C               	decfsz	((??_main+0)+0+1),f
   524  024E  0BFC               	goto	u407
   525  024F  2A4C               	nop2
   526  0250  2A51               opt asmopt_pop
   527                           
   528                           	goto	l774
   529  0251  2A52               	line	76
   530                           ;main.c: 76:     while (1) {
   531                           	
   532                           l36:	
   533  0252                     	line	77
   534                           	
   535                           l774:	
   536  0252                     ;main.c: 77:         PORTB ^= 1UL << 4;
   537                           	movlw	low(010h)
   538  0252  3010               	movwf	(??_main+0)+0
   539  0253  00FB               	movf	(??_main+0)+0,w
   540  0254  087B               	bcf	status, 5	;RP0=0, select bank0
   541  0255  1283               	bcf	status, 6	;RP1=0, select bank0
   542  0256  1303               	xorwf	(6),f	;volatile
   543  0257  0686               	line	78
   544                           	
   545                           l776:	
   546  0258                     ;main.c: 78:         UART_Write(5);
   547                           	movlw	low(05h)
   548  0258  3005               	fcall	_UART_Write
   549  0259  2220               	line	79
   550                           ;main.c: 79:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   551                           	opt asmopt_push
   552                           opt asmopt_off
   553                           movlw  6
   554  025A  3006               movwf	((??_main+0)+0+2),f
   555  025B  00FD               movlw	19
   556  025C  3013               movwf	((??_main+0)+0+1),f
   557  025D  00FC               	movlw	173
   558  025E  30AD               movwf	((??_main+0)+0),f
   559  025F  00FB               	u417:
   560  0260                     decfsz	((??_main+0)+0),f
   561  0260  0BFB               	goto	u417
   562  0261  2A60               	decfsz	((??_main+0)+0+1),f
   563  0262  0BFC               	goto	u417
   564  0263  2A60               	decfsz	((??_main+0)+0+2),f
   565  0264  0BFD               	goto	u417
   566  0265  2A60               	nop2
   567  0266  2A67               opt asmopt_pop
   568                           
   569                           	goto	l774
   570  0267  2A52               	line	80
   571                           ;main.c: 80:     }
   572                           	
   573                           l37:	
   574  0268                     	goto	l774
   575  0268  2A52               	
   576                           l38:	
   577  0269                     	line	82
   578                           ;main.c: 81:     return (0);;	Return value of _main is never used
   579                           	
   580                           l39:	
   581  0269                     	global	start
   582                           	ljmp	start
   583  0269  2800               	opt stack 0
   584                           GLOBAL	__end_of_main
   585                           	__end_of_main:
   586  026A                     	signat	_main,8314
   587                           	global	_UART_Write
   588                           
   589 ;; *************** function _UART_Write *****************
   590 ;; Defined at:
   591 ;;		line 58 in file "main.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;  data            1    wreg     unsigned char 
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  data            1    1[COMMON] unsigned char 
   596 ;; Return value:  Size  Location     Type
   597 ;;                  1    wreg      void 
   598 ;; Registers used:
   599 ;;		wreg, status,2, status,0
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   605 ;;      Params:         0       0       0       0
   606 ;;      Locals:         1       0       0       0
   607 ;;      Temps:          1       0       0       0
   608 ;;      Totals:         2       0       0       0
   609 ;;Total ram usage:        2 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; This function calls:
   612 ;;		Nothing
   613 ;; This function is called by:
   614 ;;		_main
   615 ;;		_UART_Write_Text
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   619                           	line	58
   620                           global __ptext1
   621                           __ptext1:	;psect for function _UART_Write
   622  0220                     psect	text1
   623                           	file	"main.c"
   624                           	line	58
   625                           	global	__size_of_UART_Write
   626                           	__size_of_UART_Write	equ	__end_of_UART_Write-_UART_Write
   627  0017                     	
   628                           _UART_Write:	
   629  0220                     ;incstack = 0
   630                           	opt	stack 7
   631                           ; Regs used in _UART_Write: [wreg+status,2+status,0]
   632                           ;UART_Write@data stored from wreg
   633                           	movwf	(UART_Write@data)
   634  0220  00F1               	line	60
   635                           	
   636                           l678:	
   637  0221                     ;main.c: 58: void UART_Write(char data);main.c: 59: {;main.c: 60:   while(!((TXSTA >> 1)
                                  & 1U));
   638                           	goto	l680
   639  0221  2A23               	
   640                           l23:	
   641  0222                     	goto	l680
   642  0222  2A23               	
   643                           l22:	
   644  0223                     	
   645                           l680:	
   646  0223                     	bsf	status, 5	;RP0=1, select bank1
   647  0223  1683               	bcf	status, 6	;RP1=0, select bank1
   648  0224  1303               	movf	(152)^080h,w	;volatile
   649  0225  0818               	movwf	(??_UART_Write+0)+0
   650  0226  00F0               	movlw	01h
   651  0227  3001               u195:
   652  0228                     	clrc
   653  0228  1003               	rrf	(??_UART_Write+0)+0,f
   654  0229  0CF0               	addlw	-1
   655  022A  3EFF               	skipz
   656  022B  1D03               	goto	u195
   657  022C  2A28               	btfss	0+(??_UART_Write+0)+0,(0)&7
   658  022D  1C70               	goto	u201
   659  022E  2A30               	goto	u200
   660  022F  2A31               u201:
   661  0230                     	goto	l680
   662  0230  2A23               u200:
   663  0231                     	goto	l682
   664  0231  2A32               	
   665                           l24:	
   666  0232                     	line	61
   667                           	
   668                           l682:	
   669  0232                     ;main.c: 61:   TXREG = data;
   670                           	movf	(UART_Write@data),w
   671  0232  0871               	bcf	status, 5	;RP0=0, select bank0
   672  0233  1283               	bcf	status, 6	;RP1=0, select bank0
   673  0234  1303               	movwf	(25)	;volatile
   674  0235  0099               	line	62
   675                           	
   676                           l25:	
   677  0236                     	return
   678  0236  0008               	opt stack 0
   679                           GLOBAL	__end_of_UART_Write
   680                           	__end_of_UART_Write:
   681  0237                     	signat	_UART_Write,4217
   682                           	global	_UART_Init
   683                           
   684 ;; *************** function _UART_Init *****************
   685 ;; Defined at:
   686 ;;		line 28 in file "main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;  baudrate        4    6[BANK0 ] const long 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  x               2    9[COMMON] unsigned int 
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      unsigned char 
   693 ;; Registers used:
   694 ;;		wreg, status,2, status,0, pclath, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   700 ;;      Params:         0       4       0       0
   701 ;;      Locals:         2       0       0       0
   702 ;;      Temps:          0      12       0       0
   703 ;;      Totals:         2      16       0       0
   704 ;;Total ram usage:       18 bytes
   705 ;; Hardware stack levels used:    1
   706 ;; Hardware stack levels required when called:    1
   707 ;; This function calls:
   708 ;;		___aldiv
   709 ;; This function is called by:
   710 ;;		_main
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
   714                           	line	28
   715                           global __ptext2
   716                           __ptext2:	;psect for function _UART_Init
   717  0310                     psect	text2
   718                           	file	"main.c"
   719                           	line	28
   720                           	global	__size_of_UART_Init
   721                           	__size_of_UART_Init	equ	__end_of_UART_Init-_UART_Init
   722  00EE                     	
   723                           _UART_Init:	
   724  0310                     ;incstack = 0
   725                           	opt	stack 6
   726                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   727                           	line	30
   728                           	
   729                           l742:	
   730  0310                     ;main.c: 29:     unsigned int x;;main.c: 30:     x = (4000000 - baudrate*64)/(baudrate*6
                                 4);
   731                           	bcf	status, 5	;RP0=0, select bank0
   732  0310  1283               	bcf	status, 6	;RP1=0, select bank0
   733  0311  1303               	movf	(UART_Init@baudrate),w
   734  0312  0826               	movwf	(??_UART_Init+0)+0
   735  0313  00AA               	movf	(UART_Init@baudrate+1),w
   736  0314  0827               	movwf	((??_UART_Init+0)+0+1)
   737  0315  00AB               	movf	(UART_Init@baudrate+2),w
   738  0316  0828               	movwf	((??_UART_Init+0)+0+2)
   739  0317  00AC               	movf	(UART_Init@baudrate+3),w
   740  0318  0829               	movwf	((??_UART_Init+0)+0+3)
   741  0319  00AD               	movlw	06h
   742  031A  3006               u325:
   743  031B                     	clrc
   744  031B  1003               	rlf	(??_UART_Init+0)+0,f
   745  031C  0DAA               	rlf	(??_UART_Init+0)+1,f
   746  031D  0DAB               	rlf	(??_UART_Init+0)+2,f
   747  031E  0DAC               	rlf	(??_UART_Init+0)+3,f
   748  031F  0DAD               u320:
   749  0320                     	addlw	-1
   750  0320  3EFF               	skipz
   751  0321  1D03               	goto	u325
   752  0322  2B1B               	movf	3+(??_UART_Init+0)+0,w
   753  0323  082D               	movwf	(___aldiv@divisor+3)
   754  0324  00F3               	movf	2+(??_UART_Init+0)+0,w
   755  0325  082C               	movwf	(___aldiv@divisor+2)
   756  0326  00F2               	movf	1+(??_UART_Init+0)+0,w
   757  0327  082B               	movwf	(___aldiv@divisor+1)
   758  0328  00F1               	movf	0+(??_UART_Init+0)+0,w
   759  0329  082A               	movwf	(___aldiv@divisor)
   760  032A  00F0               
   761                           	movlw	0
   762  032B  3000               	movwf	((??_UART_Init+4)+0)
   763  032C  00AE               	movlw	09h
   764  032D  3009               	movwf	((??_UART_Init+4)+0+1)
   765  032E  00AF               	movlw	03Dh
   766  032F  303D               	movwf	((??_UART_Init+4)+0+2)
   767  0330  00B0               	movlw	0
   768  0331  3000               	movwf	((??_UART_Init+4)+0+3)
   769  0332  00B1               	movf	(UART_Init@baudrate),w
   770  0333  0826               	movwf	(??_UART_Init+8)+0
   771  0334  00B2               	movf	(UART_Init@baudrate+1),w
   772  0335  0827               	movwf	((??_UART_Init+8)+0+1)
   773  0336  00B3               	movf	(UART_Init@baudrate+2),w
   774  0337  0828               	movwf	((??_UART_Init+8)+0+2)
   775  0338  00B4               	movf	(UART_Init@baudrate+3),w
   776  0339  0829               	movwf	((??_UART_Init+8)+0+3)
   777  033A  00B5               	movlw	06h
   778  033B  3006               u335:
   779  033C                     	clrc
   780  033C  1003               	rlf	(??_UART_Init+8)+0,f
   781  033D  0DB2               	rlf	(??_UART_Init+8)+1,f
   782  033E  0DB3               	rlf	(??_UART_Init+8)+2,f
   783  033F  0DB4               	rlf	(??_UART_Init+8)+3,f
   784  0340  0DB5               u330:
   785  0341                     	addlw	-1
   786  0341  3EFF               	skipz
   787  0342  1D03               	goto	u335
   788  0343  2B3C               	comf	(??_UART_Init+8)+0,f
   789  0344  09B2               	comf	(??_UART_Init+8)+1,f
   790  0345  09B3               	comf	(??_UART_Init+8)+2,f
   791  0346  09B4               	comf	(??_UART_Init+8)+3,f
   792  0347  09B5               	incf	(??_UART_Init+8)+0,f
   793  0348  0AB2               	skipnz
   794  0349  1903               	incf	(??_UART_Init+8)+1,f
   795  034A  0AB3               	skipnz
   796  034B  1903               	incf	(??_UART_Init+8)+2,f
   797  034C  0AB4               	skipnz
   798  034D  1903               	incf	(??_UART_Init+8)+3,f
   799  034E  0AB5               	movf	0+(??_UART_Init+8)+0,w
   800  034F  0832               	addwf	(??_UART_Init+4)+0,f
   801  0350  07AE               	movf	1+(??_UART_Init+8)+0,w
   802  0351  0833               	skipnc
   803  0352  1803               	incfsz	1+(??_UART_Init+8)+0,w
   804  0353  0F33               	goto	u340
   805  0354  2B56               	goto	u341
   806  0355  2B57               u340:
   807  0356                     	addwf	(??_UART_Init+4)+1,f
   808  0356  07AF               u341:
   809  0357                     	movf	2+(??_UART_Init+8)+0,w
   810  0357  0834               	skipnc
   811  0358  1803               	incfsz	2+(??_UART_Init+8)+0,w
   812  0359  0F34               	goto	u342
   813  035A  2B5C               	goto	u343
   814  035B  2B5D               u342:
   815  035C                     	addwf	(??_UART_Init+4)+2,f
   816  035C  07B0               u343:
   817  035D                     	movf	3+(??_UART_Init+8)+0,w
   818  035D  0835               	skipnc
   819  035E  1803               	incf	3+(??_UART_Init+8)+0,w
   820  035F  0A35               	addwf	(??_UART_Init+4)+3,f
   821  0360  07B1               	movf	3+(??_UART_Init+4)+0,w
   822  0361  0831               	movwf	(___aldiv@dividend+3)
   823  0362  00F7               	movf	2+(??_UART_Init+4)+0,w
   824  0363  0830               	movwf	(___aldiv@dividend+2)
   825  0364  00F6               	movf	1+(??_UART_Init+4)+0,w
   826  0365  082F               	movwf	(___aldiv@dividend+1)
   827  0366  00F5               	movf	0+(??_UART_Init+4)+0,w
   828  0367  082E               	movwf	(___aldiv@dividend)
   829  0368  00F4               
   830                           	fcall	___aldiv
   831  0369  226A               	movf	(1+(?___aldiv)),w
   832  036A  0871               	movwf	(UART_Init@x+1)
   833  036B  00FA               	movf	(0+(?___aldiv)),w
   834  036C  0870               	movwf	(UART_Init@x)
   835  036D  00F9               	line	32
   836                           	
   837                           l744:	
   838  036E                     ;main.c: 32:     if (x > 255) {
   839                           	movlw	01h
   840  036E  3001               	subwf	(UART_Init@x+1),w
   841  036F  027A               	movlw	0
   842  0370  3000               	skipnz
   843  0371  1903               	subwf	(UART_Init@x),w
   844  0372  0279               	skipc
   845  0373  1C03               	goto	u351
   846  0374  2B76               	goto	u350
   847  0375  2B77               u351:
   848  0376                     	goto	l750
   849  0376  2BD9               u350:
   850  0377                     	line	33
   851                           	
   852                           l746:	
   853  0377                     ;main.c: 33:         x = (4000000 - baudrate*16) / (baudrate * 16);
   854                           	bcf	status, 5	;RP0=0, select bank0
   855  0377  1283               	bcf	status, 6	;RP1=0, select bank0
   856  0378  1303               	movf	(UART_Init@baudrate),w
   857  0379  0826               	movwf	(??_UART_Init+0)+0
   858  037A  00AA               	movf	(UART_Init@baudrate+1),w
   859  037B  0827               	movwf	((??_UART_Init+0)+0+1)
   860  037C  00AB               	movf	(UART_Init@baudrate+2),w
   861  037D  0828               	movwf	((??_UART_Init+0)+0+2)
   862  037E  00AC               	movf	(UART_Init@baudrate+3),w
   863  037F  0829               	movwf	((??_UART_Init+0)+0+3)
   864  0380  00AD               	movlw	04h
   865  0381  3004               u365:
   866  0382                     	clrc
   867  0382  1003               	rlf	(??_UART_Init+0)+0,f
   868  0383  0DAA               	rlf	(??_UART_Init+0)+1,f
   869  0384  0DAB               	rlf	(??_UART_Init+0)+2,f
   870  0385  0DAC               	rlf	(??_UART_Init+0)+3,f
   871  0386  0DAD               u360:
   872  0387                     	addlw	-1
   873  0387  3EFF               	skipz
   874  0388  1D03               	goto	u365
   875  0389  2B82               	movf	3+(??_UART_Init+0)+0,w
   876  038A  082D               	movwf	(___aldiv@divisor+3)
   877  038B  00F3               	movf	2+(??_UART_Init+0)+0,w
   878  038C  082C               	movwf	(___aldiv@divisor+2)
   879  038D  00F2               	movf	1+(??_UART_Init+0)+0,w
   880  038E  082B               	movwf	(___aldiv@divisor+1)
   881  038F  00F1               	movf	0+(??_UART_Init+0)+0,w
   882  0390  082A               	movwf	(___aldiv@divisor)
   883  0391  00F0               
   884                           	movlw	0
   885  0392  3000               	movwf	((??_UART_Init+4)+0)
   886  0393  00AE               	movlw	09h
   887  0394  3009               	movwf	((??_UART_Init+4)+0+1)
   888  0395  00AF               	movlw	03Dh
   889  0396  303D               	movwf	((??_UART_Init+4)+0+2)
   890  0397  00B0               	movlw	0
   891  0398  3000               	movwf	((??_UART_Init+4)+0+3)
   892  0399  00B1               	movf	(UART_Init@baudrate),w
   893  039A  0826               	movwf	(??_UART_Init+8)+0
   894  039B  00B2               	movf	(UART_Init@baudrate+1),w
   895  039C  0827               	movwf	((??_UART_Init+8)+0+1)
   896  039D  00B3               	movf	(UART_Init@baudrate+2),w
   897  039E  0828               	movwf	((??_UART_Init+8)+0+2)
   898  039F  00B4               	movf	(UART_Init@baudrate+3),w
   899  03A0  0829               	movwf	((??_UART_Init+8)+0+3)
   900  03A1  00B5               	movlw	04h
   901  03A2  3004               u375:
   902  03A3                     	clrc
   903  03A3  1003               	rlf	(??_UART_Init+8)+0,f
   904  03A4  0DB2               	rlf	(??_UART_Init+8)+1,f
   905  03A5  0DB3               	rlf	(??_UART_Init+8)+2,f
   906  03A6  0DB4               	rlf	(??_UART_Init+8)+3,f
   907  03A7  0DB5               u370:
   908  03A8                     	addlw	-1
   909  03A8  3EFF               	skipz
   910  03A9  1D03               	goto	u375
   911  03AA  2BA3               	comf	(??_UART_Init+8)+0,f
   912  03AB  09B2               	comf	(??_UART_Init+8)+1,f
   913  03AC  09B3               	comf	(??_UART_Init+8)+2,f
   914  03AD  09B4               	comf	(??_UART_Init+8)+3,f
   915  03AE  09B5               	incf	(??_UART_Init+8)+0,f
   916  03AF  0AB2               	skipnz
   917  03B0  1903               	incf	(??_UART_Init+8)+1,f
   918  03B1  0AB3               	skipnz
   919  03B2  1903               	incf	(??_UART_Init+8)+2,f
   920  03B3  0AB4               	skipnz
   921  03B4  1903               	incf	(??_UART_Init+8)+3,f
   922  03B5  0AB5               	movf	0+(??_UART_Init+8)+0,w
   923  03B6  0832               	addwf	(??_UART_Init+4)+0,f
   924  03B7  07AE               	movf	1+(??_UART_Init+8)+0,w
   925  03B8  0833               	skipnc
   926  03B9  1803               	incfsz	1+(??_UART_Init+8)+0,w
   927  03BA  0F33               	goto	u380
   928  03BB  2BBD               	goto	u381
   929  03BC  2BBE               u380:
   930  03BD                     	addwf	(??_UART_Init+4)+1,f
   931  03BD  07AF               u381:
   932  03BE                     	movf	2+(??_UART_Init+8)+0,w
   933  03BE  0834               	skipnc
   934  03BF  1803               	incfsz	2+(??_UART_Init+8)+0,w
   935  03C0  0F34               	goto	u382
   936  03C1  2BC3               	goto	u383
   937  03C2  2BC4               u382:
   938  03C3                     	addwf	(??_UART_Init+4)+2,f
   939  03C3  07B0               u383:
   940  03C4                     	movf	3+(??_UART_Init+8)+0,w
   941  03C4  0835               	skipnc
   942  03C5  1803               	incf	3+(??_UART_Init+8)+0,w
   943  03C6  0A35               	addwf	(??_UART_Init+4)+3,f
   944  03C7  07B1               	movf	3+(??_UART_Init+4)+0,w
   945  03C8  0831               	movwf	(___aldiv@dividend+3)
   946  03C9  00F7               	movf	2+(??_UART_Init+4)+0,w
   947  03CA  0830               	movwf	(___aldiv@dividend+2)
   948  03CB  00F6               	movf	1+(??_UART_Init+4)+0,w
   949  03CC  082F               	movwf	(___aldiv@dividend+1)
   950  03CD  00F5               	movf	0+(??_UART_Init+4)+0,w
   951  03CE  082E               	movwf	(___aldiv@dividend)
   952  03CF  00F4               
   953                           	fcall	___aldiv
   954  03D0  226A               	movf	(1+(?___aldiv)),w
   955  03D1  0871               	movwf	(UART_Init@x+1)
   956  03D2  00FA               	movf	(0+(?___aldiv)),w
   957  03D3  0870               	movwf	(UART_Init@x)
   958  03D4  00F9               	line	36
   959                           	
   960                           l748:	
   961  03D5                     ;main.c: 36:         TXSTA |= 1ULL << 2;
   962                           	bsf	status, 5	;RP0=1, select bank1
   963  03D5  1683               	bcf	status, 6	;RP1=0, select bank1
   964  03D6  1303               	bsf	(152)^080h+(2/8),(2)&7	;volatile
   965  03D7  1518               	goto	l750
   966  03D8  2BD9               	line	37
   967                           ;main.c: 37:     }
   968                           	
   969                           l17:	
   970  03D9                     	line	39
   971                           	
   972                           l750:	
   973  03D9                     ;main.c: 39:     if (x < 256) {
   974                           	movlw	01h
   975  03D9  3001               	subwf	(UART_Init@x+1),w
   976  03DA  027A               	movlw	0
   977  03DB  3000               	skipnz
   978  03DC  1903               	subwf	(UART_Init@x),w
   979  03DD  0279               	skipnc
   980  03DE  1803               	goto	u391
   981  03DF  2BE1               	goto	u390
   982  03E0  2BE2               u391:
   983  03E1                     	goto	l19
   984  03E1  2BFD               u390:
   985  03E2                     	line	40
   986                           	
   987                           l752:	
   988  03E2                     ;main.c: 40:         SPBRG = x;
   989                           	movf	(UART_Init@x),w
   990  03E2  0879               	bsf	status, 5	;RP0=1, select bank1
   991  03E3  1683               	bcf	status, 6	;RP1=0, select bank1
   992  03E4  1303               	movwf	(153)^080h	;volatile
   993  03E5  0099               	line	43
   994                           	
   995                           l754:	
   996  03E6                     ;main.c: 43:         TXSTA &= ~(1ULL << 4);
   997                           	movlw	low(0EFh)
   998  03E6  30EF               	bcf	status, 5	;RP0=0, select bank0
   999  03E7  1283               	bcf	status, 6	;RP1=0, select bank0
  1000  03E8  1303               	movwf	(??_UART_Init+0)+0
  1001  03E9  00AA               	movf	(??_UART_Init+0)+0,w
  1002  03EA  082A               	bsf	status, 5	;RP0=1, select bank1
  1003  03EB  1683               	bcf	status, 6	;RP1=0, select bank1
  1004  03EC  1303               	andwf	(152)^080h,f	;volatile
  1005  03ED  0598               	line	45
  1006                           	
  1007                           l756:	
  1008  03EE                     ;main.c: 45:         RCSTA |= 1ULL << 7;
  1009                           	bcf	status, 5	;RP0=0, select bank0
  1010  03EE  1283               	bcf	status, 6	;RP1=0, select bank0
  1011  03EF  1303               	bsf	(24)+(7/8),(7)&7	;volatile
  1012  03F0  1798               	line	46
  1013                           	
  1014                           l758:	
  1015  03F1                     ;main.c: 46:         TRISB |= 1ULL << 2;
  1016                           	bsf	status, 5	;RP0=1, select bank1
  1017  03F1  1683               	bcf	status, 6	;RP1=0, select bank1
  1018  03F2  1303               	bsf	(134)^080h+(2/8),(2)&7	;volatile
  1019  03F3  1506               	line	47
  1020                           	
  1021                           l760:	
  1022  03F4                     ;main.c: 47:         TRISB |= 1ULL << 1;
  1023                           	bsf	(134)^080h+(1/8),(1)&7	;volatile
  1024  03F4  1486               	line	49
  1025                           	
  1026                           l762:	
  1027  03F5                     ;main.c: 49:         RCSTA |= 1ULL << 4;
  1028                           	bcf	status, 5	;RP0=0, select bank0
  1029  03F5  1283               	bcf	status, 6	;RP1=0, select bank0
  1030  03F6  1303               	bsf	(24)+(4/8),(4)&7	;volatile
  1031  03F7  1618               	line	50
  1032                           	
  1033                           l764:	
  1034  03F8                     ;main.c: 50:         TXSTA |= 1ULL << 5;
  1035                           	bsf	status, 5	;RP0=1, select bank1
  1036  03F8  1683               	bcf	status, 6	;RP1=0, select bank1
  1037  03F9  1303               	bsf	(152)^080h+(5/8),(5)&7	;volatile
  1038  03FA  1698               	goto	l19
  1039  03FB  2BFD               	line	52
  1040                           	
  1041                           l766:	
  1042  03FC                     ;main.c: 52:         return 1;;	Return value of _UART_Init is never used
  1043                           	goto	l19
  1044  03FC  2BFD               	line	53
  1045                           ;main.c: 53:     }
  1046                           	
  1047                           l18:	
  1048  03FD                     	line	56
  1049                           ;main.c: 55:     return 0;;	Return value of _UART_Init is never used
  1050                           	
  1051                           l19:	
  1052  03FD                     	return
  1053  03FD  0008               	opt stack 0
  1054                           GLOBAL	__end_of_UART_Init
  1055                           	__end_of_UART_Init:
  1056  03FE                     	signat	_UART_Init,4217
  1057                           	global	___aldiv
  1058                           
  1059 ;; *************** function ___aldiv *****************
  1060 ;; Defined at:
  1061 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  divisor         4    0[COMMON] long 
  1064 ;;  dividend        4    4[COMMON] long 
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  quotient        4    2[BANK0 ] long 
  1067 ;;  sign            1    1[BANK0 ] unsigned char 
  1068 ;;  counter         1    0[BANK0 ] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  4    0[COMMON] long 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1078 ;;      Params:         8       0       0       0
  1079 ;;      Locals:         0       6       0       0
  1080 ;;      Temps:          1       0       0       0
  1081 ;;      Totals:         9       6       0       0
  1082 ;;Total ram usage:       15 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; This function calls:
  1085 ;;		Nothing
  1086 ;; This function is called by:
  1087 ;;		_UART_Init
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           psect	text3,local,class=CODE,delta=2,merge=1,group=1
  1091                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
  1092                           	line	5
  1093                           global __ptext3
  1094                           __ptext3:	;psect for function ___aldiv
  1095  026A                     psect	text3
  1096                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
  1097                           	line	5
  1098                           	global	__size_of___aldiv
  1099                           	__size_of___aldiv	equ	__end_of___aldiv-___aldiv
  1100  00A6                     	
  1101                           ___aldiv:	
  1102  026A                     ;incstack = 0
  1103                           	opt	stack 6
  1104                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1105                           	line	13
  1106                           	
  1107                           l702:	
  1108  026A                     	bcf	status, 5	;RP0=0, select bank0
  1109  026A  1283               	bcf	status, 6	;RP1=0, select bank0
  1110  026B  1303               	clrf	(___aldiv@sign)
  1111  026C  01A1               	line	14
  1112                           	
  1113                           l704:	
  1114  026D                     	btfss	(___aldiv@divisor+3),7
  1115  026D  1FF3               	goto	u221
  1116  026E  2A70               	goto	u220
  1117  026F  2A71               u221:
  1118  0270                     	goto	l190
  1119  0270  2A7E               u220:
  1120  0271                     	line	15
  1121                           	
  1122                           l706:	
  1123  0271                     	comf	(___aldiv@divisor),f
  1124  0271  09F0               	comf	(___aldiv@divisor+1),f
  1125  0272  09F1               	comf	(___aldiv@divisor+2),f
  1126  0273  09F2               	comf	(___aldiv@divisor+3),f
  1127  0274  09F3               	incf	(___aldiv@divisor),f
  1128  0275  0AF0               	skipnz
  1129  0276  1903               	incf	(___aldiv@divisor+1),f
  1130  0277  0AF1               	skipnz
  1131  0278  1903               	incf	(___aldiv@divisor+2),f
  1132  0279  0AF2               	skipnz
  1133  027A  1903               	incf	(___aldiv@divisor+3),f
  1134  027B  0AF3               	line	16
  1135                           	clrf	(___aldiv@sign)
  1136  027C  01A1               	incf	(___aldiv@sign),f
  1137  027D  0AA1               	line	17
  1138                           	
  1139                           l190:	
  1140  027E                     	line	18
  1141                           	btfss	(___aldiv@dividend+3),7
  1142  027E  1FF7               	goto	u231
  1143  027F  2A81               	goto	u230
  1144  0280  2A82               u231:
  1145  0281                     	goto	l712
  1146  0281  2A92               u230:
  1147  0282                     	line	19
  1148                           	
  1149                           l708:	
  1150  0282                     	comf	(___aldiv@dividend),f
  1151  0282  09F4               	comf	(___aldiv@dividend+1),f
  1152  0283  09F5               	comf	(___aldiv@dividend+2),f
  1153  0284  09F6               	comf	(___aldiv@dividend+3),f
  1154  0285  09F7               	incf	(___aldiv@dividend),f
  1155  0286  0AF4               	skipnz
  1156  0287  1903               	incf	(___aldiv@dividend+1),f
  1157  0288  0AF5               	skipnz
  1158  0289  1903               	incf	(___aldiv@dividend+2),f
  1159  028A  0AF6               	skipnz
  1160  028B  1903               	incf	(___aldiv@dividend+3),f
  1161  028C  0AF7               	line	20
  1162                           	
  1163                           l710:	
  1164  028D                     	movlw	low(01h)
  1165  028D  3001               	movwf	(??___aldiv+0)+0
  1166  028E  00F8               	movf	(??___aldiv+0)+0,w
  1167  028F  0878               	xorwf	(___aldiv@sign),f
  1168  0290  06A1               	goto	l712
  1169  0291  2A92               	line	21
  1170                           	
  1171                           l191:	
  1172  0292                     	line	22
  1173                           	
  1174                           l712:	
  1175  0292                     	movlw	high highword(0)
  1176  0292  3000               	movwf	(___aldiv@quotient+3)
  1177  0293  00A5               	movlw	low highword(0)
  1178  0294  3000               	movwf	(___aldiv@quotient+2)
  1179  0295  00A4               	movlw	high(0)
  1180  0296  3000               	movwf	(___aldiv@quotient+1)
  1181  0297  00A3               	movlw	low(0)
  1182  0298  3000               	movwf	(___aldiv@quotient)
  1183  0299  00A2               
  1184                           	line	23
  1185                           	
  1186                           l714:	
  1187  029A                     	movf	(___aldiv@divisor+3),w
  1188  029A  0873               	iorwf	(___aldiv@divisor+2),w
  1189  029B  0472               	iorwf	(___aldiv@divisor+1),w
  1190  029C  0471               	iorwf	(___aldiv@divisor),w
  1191  029D  0470               	skipnz
  1192  029E  1903               	goto	u241
  1193  029F  2AA1               	goto	u240
  1194  02A0  2AA2               u241:
  1195  02A1                     	goto	l734
  1196  02A1  2AF5               u240:
  1197  02A2                     	line	24
  1198                           	
  1199                           l716:	
  1200  02A2                     	clrf	(___aldiv@counter)
  1201  02A2  01A0               	incf	(___aldiv@counter),f
  1202  02A3  0AA0               	line	25
  1203                           	goto	l720
  1204  02A4  2AB3               	
  1205                           l194:	
  1206  02A5                     	line	26
  1207                           	
  1208                           l718:	
  1209  02A5                     	movlw	01h
  1210  02A5  3001               	movwf	(??___aldiv+0)+0
  1211  02A6  00F8               u255:
  1212  02A7                     	clrc
  1213  02A7  1003               	rlf	(___aldiv@divisor),f
  1214  02A8  0DF0               	rlf	(___aldiv@divisor+1),f
  1215  02A9  0DF1               	rlf	(___aldiv@divisor+2),f
  1216  02AA  0DF2               	rlf	(___aldiv@divisor+3),f
  1217  02AB  0DF3               	decfsz	(??___aldiv+0)+0
  1218  02AC  0BF8               	goto	u255
  1219  02AD  2AA7               	line	27
  1220                           	movlw	low(01h)
  1221  02AE  3001               	movwf	(??___aldiv+0)+0
  1222  02AF  00F8               	movf	(??___aldiv+0)+0,w
  1223  02B0  0878               	addwf	(___aldiv@counter),f
  1224  02B1  07A0               	goto	l720
  1225  02B2  2AB3               	line	28
  1226                           	
  1227                           l193:	
  1228  02B3                     	line	25
  1229                           	
  1230                           l720:	
  1231  02B3                     	btfss	(___aldiv@divisor+3),(31)&7
  1232  02B3  1FF3               	goto	u261
  1233  02B4  2AB6               	goto	u260
  1234  02B5  2AB7               u261:
  1235  02B6                     	goto	l718
  1236  02B6  2AA5               u260:
  1237  02B7                     	goto	l722
  1238  02B7  2AB9               	
  1239                           l195:	
  1240  02B8                     	goto	l722
  1241  02B8  2AB9               	line	29
  1242                           	
  1243                           l196:	
  1244  02B9                     	line	30
  1245                           	
  1246                           l722:	
  1247  02B9                     	movlw	01h
  1248  02B9  3001               	movwf	(??___aldiv+0)+0
  1249  02BA  00F8               u275:
  1250  02BB                     	clrc
  1251  02BB  1003               	rlf	(___aldiv@quotient),f
  1252  02BC  0DA2               	rlf	(___aldiv@quotient+1),f
  1253  02BD  0DA3               	rlf	(___aldiv@quotient+2),f
  1254  02BE  0DA4               	rlf	(___aldiv@quotient+3),f
  1255  02BF  0DA5               	decfsz	(??___aldiv+0)+0
  1256  02C0  0BF8               	goto	u275
  1257  02C1  2ABB               	line	31
  1258                           	
  1259                           l724:	
  1260  02C2                     	movf	(___aldiv@divisor+3),w
  1261  02C2  0873               	subwf	(___aldiv@dividend+3),w
  1262  02C3  0277               	skipz
  1263  02C4  1D03               	goto	u285
  1264  02C5  2AD0               	movf	(___aldiv@divisor+2),w
  1265  02C6  0872               	subwf	(___aldiv@dividend+2),w
  1266  02C7  0276               	skipz
  1267  02C8  1D03               	goto	u285
  1268  02C9  2AD0               	movf	(___aldiv@divisor+1),w
  1269  02CA  0871               	subwf	(___aldiv@dividend+1),w
  1270  02CB  0275               	skipz
  1271  02CC  1D03               	goto	u285
  1272  02CD  2AD0               	movf	(___aldiv@divisor),w
  1273  02CE  0870               	subwf	(___aldiv@dividend),w
  1274  02CF  0274               u285:
  1275  02D0                     	skipc
  1276  02D0  1C03               	goto	u281
  1277  02D1  2AD3               	goto	u280
  1278  02D2  2AD4               u281:
  1279  02D3                     	goto	l730
  1280  02D3  2AE4               u280:
  1281  02D4                     	line	32
  1282                           	
  1283                           l726:	
  1284  02D4                     	movf	(___aldiv@divisor),w
  1285  02D4  0870               	subwf	(___aldiv@dividend),f
  1286  02D5  02F4               	movf	(___aldiv@divisor+1),w
  1287  02D6  0871               	skipc
  1288  02D7  1C03               	incfsz	(___aldiv@divisor+1),w
  1289  02D8  0F71               	subwf	(___aldiv@dividend+1),f
  1290  02D9  02F5               	movf	(___aldiv@divisor+2),w
  1291  02DA  0872               	skipc
  1292  02DB  1C03               	incfsz	(___aldiv@divisor+2),w
  1293  02DC  0F72               	subwf	(___aldiv@dividend+2),f
  1294  02DD  02F6               	movf	(___aldiv@divisor+3),w
  1295  02DE  0873               	skipc
  1296  02DF  1C03               	incfsz	(___aldiv@divisor+3),w
  1297  02E0  0F73               	subwf	(___aldiv@dividend+3),f
  1298  02E1  02F7               	line	33
  1299                           	
  1300                           l728:	
  1301  02E2                     	bsf	(___aldiv@quotient)+(0/8),(0)&7
  1302  02E2  1422               	goto	l730
  1303  02E3  2AE4               	line	34
  1304                           	
  1305                           l197:	
  1306  02E4                     	line	35
  1307                           	
  1308                           l730:	
  1309  02E4                     	movlw	01h
  1310  02E4  3001               u295:
  1311  02E5                     	clrc
  1312  02E5  1003               	rrf	(___aldiv@divisor+3),f
  1313  02E6  0CF3               	rrf	(___aldiv@divisor+2),f
  1314  02E7  0CF2               	rrf	(___aldiv@divisor+1),f
  1315  02E8  0CF1               	rrf	(___aldiv@divisor),f
  1316  02E9  0CF0               	addlw	-1
  1317  02EA  3EFF               	skipz
  1318  02EB  1D03               	goto	u295
  1319  02EC  2AE5               
  1320                           	line	36
  1321                           	
  1322                           l732:	
  1323  02ED                     	movlw	01h
  1324  02ED  3001               	subwf	(___aldiv@counter),f
  1325  02EE  02A0               	btfss	status,2
  1326  02EF  1D03               	goto	u301
  1327  02F0  2AF2               	goto	u300
  1328  02F1  2AF3               u301:
  1329  02F2                     	goto	l722
  1330  02F2  2AB9               u300:
  1331  02F3                     	goto	l734
  1332  02F3  2AF5               	
  1333                           l198:	
  1334  02F4                     	goto	l734
  1335  02F4  2AF5               	line	37
  1336                           	
  1337                           l192:	
  1338  02F5                     	line	38
  1339                           	
  1340                           l734:	
  1341  02F5                     	movf	((___aldiv@sign)),w
  1342  02F5  0821               	btfsc	status,2
  1343  02F6  1903               	goto	u311
  1344  02F7  2AF9               	goto	u310
  1345  02F8  2AFA               u311:
  1346  02F9                     	goto	l738
  1347  02F9  2B06               u310:
  1348  02FA                     	line	39
  1349                           	
  1350                           l736:	
  1351  02FA                     	comf	(___aldiv@quotient),f
  1352  02FA  09A2               	comf	(___aldiv@quotient+1),f
  1353  02FB  09A3               	comf	(___aldiv@quotient+2),f
  1354  02FC  09A4               	comf	(___aldiv@quotient+3),f
  1355  02FD  09A5               	incf	(___aldiv@quotient),f
  1356  02FE  0AA2               	skipnz
  1357  02FF  1903               	incf	(___aldiv@quotient+1),f
  1358  0300  0AA3               	skipnz
  1359  0301  1903               	incf	(___aldiv@quotient+2),f
  1360  0302  0AA4               	skipnz
  1361  0303  1903               	incf	(___aldiv@quotient+3),f
  1362  0304  0AA5               	goto	l738
  1363  0305  2B06               	
  1364                           l199:	
  1365  0306                     	line	40
  1366                           	
  1367                           l738:	
  1368  0306                     	movf	(___aldiv@quotient+3),w
  1369  0306  0825               	movwf	(?___aldiv+3)
  1370  0307  00F3               	movf	(___aldiv@quotient+2),w
  1371  0308  0824               	movwf	(?___aldiv+2)
  1372  0309  00F2               	movf	(___aldiv@quotient+1),w
  1373  030A  0823               	movwf	(?___aldiv+1)
  1374  030B  00F1               	movf	(___aldiv@quotient),w
  1375  030C  0822               	movwf	(?___aldiv)
  1376  030D  00F0               
  1377                           	goto	l200
  1378  030E  2B0F               	
  1379                           l740:	
  1380  030F                     	line	41
  1381                           	
  1382                           l200:	
  1383  030F                     	return
  1384  030F  0008               	opt stack 0
  1385                           GLOBAL	__end_of___aldiv
  1386                           	__end_of___aldiv:
  1387  0310                     	signat	___aldiv,8316
  1388                           global	___latbits
  1389                           ___latbits	equ	0
  1390  0000                     	global	btemp
  1391                           	btemp set 07Eh
  1392  007E                     
  1393                           	DABS	1,126,2	;btemp
  1394                           	global	wtemp0
  1395                           	wtemp0 set btemp+0
  1396  007E                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      26
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     3      4     851
                                             11 COMMON     3     3      0
                                             22 BANK0      4     0      4
                          _UART_Init
                         _UART_Write
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _UART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1A      1A       3       32.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Nov 16 15:47:08 2019

            __CFG_CP$OFF 0000                       l22 0223                       l23 0222  
                     l24 0232                       l17 03D9                       l25 0236  
                     l18 03FD                       l19 03FD                       l36 0252  
                     l37 0268                       l38 0269                       l39 0269  
                    l200 030F                      l190 027E                      l191 0292  
                    l192 02F5                      l193 02B3                      l194 02A5  
                    l195 02B8                      l196 02B9                      l197 02E4  
                    l198 02F4                      l710 028D                      l702 026A  
                    l199 0306                      l720 02B3                      l712 0292  
                    l704 026D                      l730 02E4                      l722 02B9  
                    l714 029A                      l706 0271                      l740 030F  
                    l732 02ED                      l724 02C2                      l716 02A2  
                    l708 0282                      l726 02D4                      l718 02A5  
                    l734 02F5                      l750 03D9                      l742 0310  
                    l736 02FA                      l728 02E2                      l760 03F4  
                    l752 03E2                      l744 036E                      l680 0223  
                    l738 0306                      l762 03F5                      l754 03E6  
                    l746 0377                      l682 0232                      l770 023D  
                    l764 03F8                      l756 03EE                      l748 03D5  
                    l772 0248                      l766 03FC                      l758 03F1  
                    l678 0221                      l774 0252                      l776 0258  
                    l768 0237                      u200 0231                      u201 0230  
                    u300 02F3                      u220 0271                      u301 02F2  
                    u221 0270                      u310 02FA                      u230 0282  
                    u311 02F9                      u231 0281                      u240 02A2  
                    u320 0320                      u241 02A1                      u330 0341  
                    u260 02B7                      u340 0356                      u261 02B6  
                    u341 0357                      u325 031B                      u350 0377  
                    u342 035C                      u255 02A7                      u351 0376  
                    u343 035D                      u335 033C                      u407 024C  
                    u280 02D4                      u360 0387                      u281 02D3  
                    u417 0260                      u370 03A8             __CFG_CPD$OFF 0000  
                    u275 02BB                      u195 0228                      u380 03BD  
                    u285 02D0                      u381 03BE                      u365 0382  
                    u390 03E2                      u382 03C3                      u295 02E5  
                    u391 03E1                      u383 03C4                      u375 03A3  
           __CFG_LVP$OFF 0000                     _main 0237                     btemp 007E  
                   start 0000            __CFG_MCLRE$ON 0000          __end_of___aldiv 0310  
                  ?_main 0036            __CFG_WDTE$OFF 0000                    _RCSTA 0018  
                  _SPBRG 0099                    _PORTB 0006                    _TRISB 0086  
                  _TXREG 0019                    _TXSTA 0098              ?_UART_Write 0070  
     __size_of_UART_Init 00EE           __CFG_BOREN$OFF 0000                    status 0003  
                  wtemp0 007E          __initialization 03FE             __end_of_main 026A  
                 ??_main 007B           __CFG_PWRTE$OFF 0000        __end_of_UART_Init 03FE  
    __size_of_UART_Write 0017                ??___aldiv 0078  __end_of__initialization 03FE  
         __pcstackCOMMON 0070               __pmaintext 0237             ??_UART_Write 0070  
                ___aldiv 026A       __end_of_UART_Write 0237                  __ptext1 0220  
                __ptext2 0310                  __ptext3 026A         ___aldiv@dividend 0074  
   end_of_initialization 03FE         ___aldiv@quotient 0022                _UART_Init 0310  
         UART_Write@data 0071               ?_UART_Init 0026      start_initialization 03FE  
              ___latbits 0000            __pcstackBANK0 0020                 ?___aldiv 0070  
            ??_UART_Init 002A               UART_Init@x 0079          ___aldiv@divisor 0070  
        ___aldiv@counter 0020        UART_Init@baudrate 0026         __size_of___aldiv 00A6  
          __size_of_main 0033                 main@argc 0036                 main@argv 0038  
           ___aldiv@sign 0021               _UART_Write 0220       __CFG_FOSC$INTOSCIO 0000  
